@article{Driscoll198986,
title = "Making data structures persistent",
journal = "Journal of Computer and System Sciences",
volume = "38",
number = "1",
pages = "86 - 124",
year = "1989",
issn = "0022-0000",
doi = "10.1016/0022-0000(89)90034-2",
url = "http://www.sciencedirect.com/science/article/pii/0022000089900342",
author = "James R. Driscoll and Neil Sarnak and Daniel D. Sleator and Robert E. Tarjan",
abstract = "This paper is a study of persistence in data structures. Ordinary data structures are ephemeral in the sense that a change to the structure destroys the old version, leaving only the new version available for use. In contrast, a persistent structure allows access to any version, old or new, at any time. We develop simple, systematic, and efficient techniques for making linked data structures persistent. We use our techniques to devise persistent forms of binary search trees with logarithmic access, insertion, and deletion times and O(1) space bounds for insertion and deletion.",
}

﻿@article{Tsotras1995237,
title = "The Snapshot Index: An I/O-Optimal access method for timeslice queries",
journal = "Information Systems",
volume = "20",
number = "3",
pages = "237 - 260",
year = "1995",
issn = "0306-4379",
doi = "10.1016/0306-4379(95)00011-R",
url = "http://www.sciencedirect.com/science/article/pii/030643799500011R",
author = "Vassilis J. Tsotras and Nickolas Kangelaris",
keywords = "Access Methods, Transaction-time Databases, Optimal I/O, Data Structures",
abstract = "We present an access method for timeslice queries that reconstructs a past state s(t) of a time-evolving collection of objects, in O(sollogbn + ¦s(t)¦b) I/O's, where ¦s(t)¦ denotes the size of the collection at time t, n is the total number of changes in the collection's evolution and b is the size of an I/O transfer. Changes include the addition, deletion or attribute modification of objects; they are assumed to occur in increasing time order and always affect the most current state of the collection (thus our index supports transaction-time.) The space used is O(nb) while the update processing is constant per change, i.e., independent of n. This is the first I/O-optimal access method for this problem using O(nb) space and O(1) updating (in the expected amortized sense due to the use of hashing.) This performance is also achieved for interval intersection temporal queries. An advantage of our approach is that its performance can be tuned to match particular application needs (trading space for query time and vice versa). In addition, the Snapshot Index can naturally migrate data on a write-once optical medium while maintaining the same performance bounds."
}

@article{10.1109/AFIPS.1987.11,
author = {Vinit Verma and Huizhu Lu},
title = {A new approach to version management for databases},
journal ={Managing Requirements Knowledge, International Workshop on},
volume = {0},
year = {1987},
pages = {645},
doi = {http://doi.ieeecomputersociety.org/10.1109/AFIPS.1987.11},
publisher = {IEEE Computer Society},
address = {Los Alamitos, CA, USA},
}
